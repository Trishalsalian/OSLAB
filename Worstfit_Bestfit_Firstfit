#include <stdio.h>
#define MAX 100

void firstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];
    for (int i = 0; i < n; i++) allocation[i] = -1;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                break;
            }
    printf("\nFirst Fit Allocation:\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++)
        printf("%d\t\t%d\t\t%s\n", i + 1, processSize[i], allocation[i] != -1 ? (char[10]){allocation[i] + '0', 0} : "Not Allocated");
}

void bestFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];
    for (int i = 0; i < n; i++) allocation[i] = -1;
    for (int i = 0; i < n; i++) {
        int bestIdx = -1;
        for (int j = 0; j < m; j++)
            if (blockSize[j] >= processSize[i])
                if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx])
                    bestIdx = j;
        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }
    printf("\nBest Fit Allocation:\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++)
        printf("%d\t\t%d\t\t%s\n", i + 1, processSize[i], allocation[i] != -1 ? (char[10]){allocation[i] + '0', 0} : "Not Allocated");
}

void worstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];
    for (int i = 0; i < n; i++) allocation[i] = -1;
    for (int i = 0; i < n; i++) {
        int worstIdx = -1;
        for (int j = 0; j < m; j++)
            if (blockSize[j] >= processSize[i])
                if (worstIdx == -1 || blockSize[j] > blockSize[worstIdx])
                    worstIdx = j;
        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSize[worstIdx] -= processSize[i];
        }
    }
    printf("\nWorst Fit Allocation:\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++)
        printf("%d\t\t%d\t\t%s\n", i + 1, processSize[i], allocation[i] != -1 ? (char[10]){allocation[i] + '0', 0} : "Not Allocated");
}

void main() {
    int m, n, blockSize[MAX], processSize[MAX], temp[MAX];
    printf("Enter number of memory blocks: ");
    scanf("%d", &m);
    printf("Enter sizes of memory blocks: ");
    for (int i = 0; i < m; i++) scanf("%d", &blockSize[i]);
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter sizes of processes: ");
    for (int i = 0; i < n; i++) scanf("%d", &processSize[i]);

    for (int i = 0; i < m; i++) temp[i] = blockSize[i];
    firstFit(temp, m, processSize, n);

    for (int i = 0; i < m; i++) temp[i] = blockSize[i];
    bestFit(temp, m, processSize, n);

    for (int i = 0; i < m; i++) temp[i] = blockSize[i];
    worstFit(temp, m, processSize, n);

}
