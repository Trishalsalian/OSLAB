#include <stdio.h>

int search(int frame[], int n, int page) {
    for (int i = 0; i < n; i++)
        if (frame[i] == page)
            return 1;
    return 0;
}

int predict(int pages[], int frame[], int n, int index, int size) {
    int res = -1, farthest = index;
    for (int i = 0; i < n; i++) {
        int j;
        for (j = index; j < size; j++) {
            if (frame[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }
        if (j == size)
            return i;
    }
    return res == -1 ? 0 : res;
}

void fifo(int pages[], int size, int capacity) {
    int frame[capacity], front = 0, count = 0, pageFaults = 0;
    for (int i = 0; i < capacity; i++) frame[i] = -1;
    for (int i = 0; i < size; i++) {
        if (!search(frame, capacity, pages[i])) {
            frame[front] = pages[i];
            front = (front + 1) % capacity;
            pageFaults++;
        }
    }
    printf("\nFIFO Page Faults: %d\n", pageFaults);
}

void lru(int pages[], int size, int capacity) {
    int frame[capacity], recent[capacity], pageFaults = 0, time = 0;
    for (int i = 0; i < capacity; i++) frame[i] = -1;
    for (int i = 0; i < size; i++) {
        int flag = 0;
        for (int j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                time++;
                recent[j] = time;
                flag = 1;
                break;
            }
        }
        if (!flag) {
            int min = 0;
            for (int j = 1; j < capacity; j++)
                if (recent[j] < recent[min])
                    min = j;
            frame[min] = pages[i];
            time++;
            recent[min] = time;
            pageFaults++;
        }
    }
    printf("LRU Page Faults: %d\n", pageFaults);
}

void optimal(int pages[], int size, int capacity) {
    int frame[capacity], pageFaults = 0;
    for (int i = 0; i < capacity; i++) frame[i] = -1;
    for (int i = 0; i < size; i++) {
        if (!search(frame, capacity, pages[i])) {
            int j;
            for (j = 0; j < capacity; j++)
                if (frame[j] == -1) {
                    frame[j] = pages[i];
                    break;
                }
            if (j == capacity) {
                int idx = predict(pages, frame, capacity, i + 1, size);
                frame[idx] = pages[i];
            }
            pageFaults++;
        }
    }
    printf("Optimal Page Faults: %d\n", pageFaults);
}

void main() {
    int pages[100], size, capacity;
    printf("Enter number of pages: ");
    scanf("%d", &size);
    printf("Enter page reference string: ");
    for (int i = 0; i < size; i++) scanf("%d", &pages[i]);
    printf("Enter number of frames: ");
    scanf("%d", &capacity);

    fifo(pages, size, capacity);
    lru(pages, size, capacity);
    optimal(pages, size, capacity);

}
